{
  "name": "Region",
  "class": "Marionette.Region",
  "extends": [
    "Backbone.Events",
    "Backbone.extend"
  ],
  "description": "<p>Regions provide consistent methods to manage, show and destroy views in your applications and layouts. \nThey use a jQuery selector to show your views in the correct place.</p>\n",
  "examples": [
    {
      "name": "Adding a region to your app",
      "example": "<p>You can add regions to your applications by calling the <code>addRegions</code> method on\nyour application instance. This method expects a single hash parameter, with\nnamed regions and either jQuery selectors or <code>Region</code> objects. You may\ncall this method as many times as you like, and it will continue adding regions\nto the app.</p>\n<pre><code class=\"lang-js\">MyApp.addRegions({\n  mainRegion: <span class=\"hljs-string\">\"#main-content\"</span>,\n  navigationRegion: <span class=\"hljs-string\">\"#navigation\"</span>\n});\n</code></pre>\n<p>As soon as you call <code>addRegions</code>, your regions are available on your\napp object. In the above, example <code>MyApp.mainRegion</code> and <code>MyApp.navigationRegion</code>\nwould be available for use immediately.</p>\n<p>If you specify the same region name twice, the last one in wins.</p>\n"
    },
    {
      "name": "Adding a region to a layout",
      "example": "<p>You can add regions to your layouts by setting a regions property on the class. When \nthe layout is shown, it should show its subviews in its regions.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> AppLayoutView = Backbone.Marionette.LayoutView.extend({\n  template: <span class=\"hljs-string\">\"#layout-view-template\"</span>,\n\n  regions: {\n    menu: <span class=\"hljs-string\">\"#menu\"</span>,\n    content: <span class=\"hljs-string\">\"#content\"</span>\n  },\n\n  onShow: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.menu.show(<span class=\"hljs-keyword\">new</span> MenuView());\n    <span class=\"hljs-keyword\">this</span>.content.show(<span class=\"hljs-keyword\">new</span> MainContentView());\n  }\n});\n</code></pre>\n"
    },
    {
      "name": "Creating a standalone region",
      "example": "<p>You can create a standalone region, by simply instantiating a region and providing a\nway to find an el on the page. </p>\n<p>Once a region is instantiated, it can be used to show a view inside it. </p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> myRegion = <span class=\"hljs-keyword\">new</span> Region({\n  el: <span class=\"hljs-string\">'.my-region'</span>\n});\n\nmyRegion.show(<span class=\"hljs-keyword\">new</span> Backbone.View());\n</code></pre>\n"
    }
  ],
  "constructor": {
    "examples": [],
    "description": {
      "tags": [
        {
          "type": "param",
          "types": [
            "Object"
          ],
          "name": "options",
          "description": "",
          "optional": false,
          "typeStr": "Object"
        }
      ],
      "description": {
        "full": "<p>The Region constructor function is responsible for setting up the region and its root element.</p>\n<p>There are four ways to specify an <code>el</code> when instantiating a region</p>\n<ol>\n<li>as a selector as a class property</li>\n<li>as a selector as a constructor option</li>\n<li>as a dom element as a constructor option</li>\n<li>as a jQuery element as a constructor option</li>\n</ol>\n<h4 id=\"1-el-as-a-class-property\">1. <code>el</code> as a class property</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> SomeRegion = Backbone.Marionette.Region.extend({\n  el: <span class=\"hljs-string\">\"#some-div\"</span>,\n});\n\nMyApp.someRegion = <span class=\"hljs-keyword\">new</span> SomeRegion();\nMyApp.someRegion.show(someView);\n</code></pre>\n<h4 id=\"2-el-as-a-selector-\">2. <code>el</code> as a selector:</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mgr = <span class=\"hljs-keyword\">new</span> Backbone.Marionette.Region({\n  el: <span class=\"hljs-string\">\"#someElement\"</span>\n});\n</code></pre>\n<h4 id=\"-el-as-raw-dom-node-reference-\"><code>el</code> as raw DOM node reference:</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mgr = <span class=\"hljs-keyword\">new</span> Backbone.Marionette.Region({\n  el: <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>)\n});\n</code></pre>\n<h4 id=\"-el-as-a-jquery-wrapped-dom-node-\"><code>el</code> as a <code>jQuery</code> wrapped DOM node:</h4>\n<p>```js\nvar mgr = new Backbone.Marionette.Region({\n  el: $(&quot;body&quot;)\n});</p>\n",
        "summary": "<p>The Region constructor function is responsible for setting up the region and its root element.</p>\n",
        "body": "<p>There are four ways to specify an <code>el</code> when instantiating a region</p>\n<ol>\n<li>as a selector as a class property</li>\n<li>as a selector as a constructor option</li>\n<li>as a dom element as a constructor option</li>\n<li>as a jQuery element as a constructor option</li>\n</ol>\n<h4 id=\"1-el-as-a-class-property\">1. <code>el</code> as a class property</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> SomeRegion = Backbone.Marionette.Region.extend({\n  el: <span class=\"hljs-string\">\"#some-div\"</span>,\n});\n\nMyApp.someRegion = <span class=\"hljs-keyword\">new</span> SomeRegion();\nMyApp.someRegion.show(someView);\n</code></pre>\n<h4 id=\"2-el-as-a-selector-\">2. <code>el</code> as a selector:</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mgr = <span class=\"hljs-keyword\">new</span> Backbone.Marionette.Region({\n  el: <span class=\"hljs-string\">\"#someElement\"</span>\n});\n</code></pre>\n<h4 id=\"-el-as-raw-dom-node-reference-\"><code>el</code> as raw DOM node reference:</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mgr = <span class=\"hljs-keyword\">new</span> Backbone.Marionette.Region({\n  el: <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>)\n});\n</code></pre>\n<h4 id=\"-el-as-a-jquery-wrapped-dom-node-\"><code>el</code> as a <code>jQuery</code> wrapped DOM node:</h4>\n<p>```js\nvar mgr = new Backbone.Marionette.Region({\n  el: $(&quot;body&quot;)\n});</p>\n"
      },
      "isPrivate": false,
      "params": [
        {
          "type": "param",
          "types": [
            "Object"
          ],
          "name": "options",
          "description": "",
          "optional": false,
          "typeStr": "Object"
        }
      ],
      "paramStr": "options"
    }
  },
  "properties": {
    "el": {
      "examples": [],
      "description": {
        "tags": [],
        "description": {
          "full": "<p>The <code>el</code> property is the root dom element that holds the view&#39;s element.</p>\n<p>Note that a region must have an element to attach itself to when it is instantiated. \nIf you do not specify a selector when attaching the region instance to your\nApplication or LayoutView, the region must provide an <code>el</code> either in its\ndefinition or constructor options.</p>\n",
          "summary": "<p>The <code>el</code> property is the root dom element that holds the view&#39;s element.</p>\n",
          "body": "<p>Note that a region must have an element to attach itself to when it is instantiated. \nIf you do not specify a selector when attaching the region instance to your\nApplication or LayoutView, the region must provide an <code>el</code> either in its\ndefinition or constructor options.</p>\n"
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      }
    },
    "$el": {
      "examples": [],
      "description": {
        "tags": [],
        "description": {
          "full": "<p>The <code>$el</code> property is the jQuery wrapped version of <code>el</code>.</p>\n",
          "summary": "<p>The <code>$el</code> property is the jQuery wrapped version of <code>el</code>.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      }
    },
    "currentView": {
      "examples": [],
      "description": {
        "tags": [],
        "description": {
          "full": "<p>The <code>currentView</code> property references the currently shown view. \nIf <code>currentView</code> is <code>undefined</code>, the region is empty.</p>\n",
          "summary": "<p>The <code>currentView</code> property references the currently shown view. \nIf <code>currentView</code> is <code>undefined</code>, the region is empty.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      }
    },
    "initialize": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "options",
            "description": "The constructor's options",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "description": {
          "full": "<p>If <code>initialize</code> is set in the Region class, it will be called when new regions are instantiated.</p>\n<p>The <code>initialize</code> function is a good place to put custom, post instantiation class logic. </p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> SomeRegion = Backbone.Marionette.Region.extend({\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// do some stuff</span>\n  }\n});\n\nMyApp.someRegion = <span class=\"hljs-keyword\">new</span> SomeRegion();\n</code></pre>\n",
          "summary": "<p>If <code>initialize</code> is set in the Region class, it will be called when new regions are instantiated.</p>\n",
          "body": "<p>The <code>initialize</code> function is a good place to put custom, post instantiation class logic. </p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> SomeRegion = Backbone.Marionette.Region.extend({\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// do some stuff</span>\n  }\n});\n\nMyApp.someRegion = <span class=\"hljs-keyword\">new</span> SomeRegion();\n</code></pre>\n"
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "options",
            "description": "The constructor's options",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "paramStr": "options"
      }
    }
  },
  "functions": {
    "buildRegion": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "public"
          },
          {
            "type": "static",
            "string": ""
          },
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "regionConfig",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "description": {
          "full": "<p>Returns a new Region from the <code>regionConfig</code> object. This is used by the RegionManager to\ncreate a new Region instance.</p>\n",
          "summary": "<p>Returns a new Region from the <code>regionConfig</code> object. This is used by the RegionManager to\ncreate a new Region instance.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "api": {
          "type": "api",
          "visibility": "public"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "regionConfig",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "paramStr": "regionConfig, DefaultRegionClass"
      }
    },
    "_buildRegionFromSelector": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "static",
            "string": ""
          },
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "selector",
            "description": "",
            "optional": false,
            "typeStr": "String"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "description": {
          "full": "<p>Build the region from a string selector like &#39;#foo-region&#39;</p>\n",
          "summary": "<p>Build the region from a string selector like &#39;#foo-region&#39;</p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "selector",
            "description": "",
            "optional": false,
            "typeStr": "String"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "paramStr": "selector, DefaultRegionClass"
      }
    },
    "_buildRegionFromObject": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "static",
            "string": ""
          },
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "regionConfig",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "description": {
          "full": "<p>Build the region from a configuration object</p>\n<pre><code class=\"lang-js\">{ selector: <span class=\"hljs-string\">'#foo'</span>, regionClass: FooRegion }\n</code></pre>\n",
          "summary": "<p>Build the region from a configuration object</p>\n<pre><code class=\"lang-js\">{ selector: <span class=\"hljs-string\">'#foo'</span>, regionClass: FooRegion }\n</code></pre>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "regionConfig",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "DefaultRegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "paramStr": "regionConfig, DefaultRegionClass"
      }
    },
    "_buildRegionFromRegionClass": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "static",
            "string": ""
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "RegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "description": {
          "full": "<p>Build the region directly from a given <code>RegionClass</code></p>\n",
          "summary": "<p>Build the region directly from a given <code>RegionClass</code></p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Marionette.Region"
            ],
            "name": "RegionClass",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.Region"
          }
        ],
        "paramStr": "RegionClass"
      }
    },
    "show": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "public"
          },
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          },
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "options",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "description": {
          "full": "<p>Shows <code>newView</code> inside the region if <code>newView</code> is not already shown within the region. The previous view, if one exists,\nwill be destroyed in this process. The <code>show</code> methods fires the show and swap triggerMethods.</p>\n<p>You can modify the behavior of <code>show</code> by passing in an options object.</p>\n<p><code>preventDestroy</code>\nPass this as <code>true</code> to prevent the destruction of the old view. This is not recommended, as Views\nare intended to be throwaway objects in Marionette. You are encouraged to only use this option\nif the View you are rendering is a render-heavy view, such as a large chart or graphic.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Show the first view.</span>\n<span class=\"hljs-keyword\">var</span> myView = <span class=\"hljs-keyword\">new</span> MyView();\nMyApp.mainRegion.show(myView);\n\n<span class=\"hljs-comment\">// Replace the view with another. The `destroy` method is called for you</span>\n<span class=\"hljs-keyword\">var</span> anotherView = <span class=\"hljs-keyword\">new</span> AnotherView();\nMyApp.mainRegion.show(anotherView);\n\n<span class=\"hljs-comment\">// Replace the view with another. Prevent `destroy` from being called</span>\n<span class=\"hljs-keyword\">var</span> anotherView2 = <span class=\"hljs-keyword\">new</span> AnotherView();\nMyApp.mainRegion.show(anotherView2, { preventDestroy: <span class=\"hljs-literal\">true</span> });\n\n`forceShow`\nBy <span class=\"hljs-keyword\">default</span> passing the same view to `show` will be a noop; your view will not be rendered, and no\nevents will be fired. Pass `<span class=\"hljs-literal\">true</span>` <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">this</span> option to cause the entire show process to happen again,\nincluding events and the re-rendering of your view.\n\n```js\n<span class=\"hljs-keyword\">var</span> myView = <span class=\"hljs-keyword\">new</span> MyView();\nMyApp.mainRegion.show(myView);\n\n<span class=\"hljs-comment\">// the second show call will re-show the view</span>\nMyApp.mainRegion.show(myView, {forceShow: <span class=\"hljs-literal\">true</span>});\n</code></pre>\n",
          "summary": "<p>Shows <code>newView</code> inside the region if <code>newView</code> is not already shown within the region. The previous view, if one exists,\nwill be destroyed in this process. The <code>show</code> methods fires the show and swap triggerMethods.</p>\n",
          "body": "<p>You can modify the behavior of <code>show</code> by passing in an options object.</p>\n<p><code>preventDestroy</code>\nPass this as <code>true</code> to prevent the destruction of the old view. This is not recommended, as Views\nare intended to be throwaway objects in Marionette. You are encouraged to only use this option\nif the View you are rendering is a render-heavy view, such as a large chart or graphic.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Show the first view.</span>\n<span class=\"hljs-keyword\">var</span> myView = <span class=\"hljs-keyword\">new</span> MyView();\nMyApp.mainRegion.show(myView);\n\n<span class=\"hljs-comment\">// Replace the view with another. The `destroy` method is called for you</span>\n<span class=\"hljs-keyword\">var</span> anotherView = <span class=\"hljs-keyword\">new</span> AnotherView();\nMyApp.mainRegion.show(anotherView);\n\n<span class=\"hljs-comment\">// Replace the view with another. Prevent `destroy` from being called</span>\n<span class=\"hljs-keyword\">var</span> anotherView2 = <span class=\"hljs-keyword\">new</span> AnotherView();\nMyApp.mainRegion.show(anotherView2, { preventDestroy: <span class=\"hljs-literal\">true</span> });\n\n`forceShow`\nBy <span class=\"hljs-keyword\">default</span> passing the same view to `show` will be a noop; your view will not be rendered, and no\nevents will be fired. Pass `<span class=\"hljs-literal\">true</span>` <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">this</span> option to cause the entire show process to happen again,\nincluding events and the re-rendering of your view.\n\n```js\n<span class=\"hljs-keyword\">var</span> myView = <span class=\"hljs-keyword\">new</span> MyView();\nMyApp.mainRegion.show(myView);\n\n<span class=\"hljs-comment\">// the second show call will re-show the view</span>\nMyApp.mainRegion.show(myView, {forceShow: <span class=\"hljs-literal\">true</span>});\n</code></pre>\n"
        },
        "isPrivate": false,
        "api": {
          "type": "api",
          "visibility": "public"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          },
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "options",
            "description": "",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "paramStr": "view, options"
      }
    },
    "_ensureElement": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Ensure that <code>this.el</code> and <code>this.$el</code> is set. If </p>\n",
          "summary": "<p>Ensure that <code>this.el</code> and <code>this.$el</code> is set. If </p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [],
        "paramStr": ""
      }
    },
    "getEl": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "param",
            "types": [
              ""
            ],
            "name": "el",
            "description": "",
            "optional": false,
            "typeStr": ""
          }
        ],
        "description": {
          "full": "<p>Returns the jQuery Object of <code>el</code>.\nDo note that it is not recommended that you override this method because it is ignored in certain circumstances.</p>\n",
          "summary": "<p>Returns the jQuery Object of <code>el</code>.\nDo note that it is not recommended that you override this method because it is ignored in certain circumstances.</p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              ""
            ],
            "name": "el",
            "description": "",
            "optional": false,
            "typeStr": ""
          }
        ],
        "paramStr": "el"
      }
    },
    "attachHtml": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          }
        ],
        "description": {
          "full": "<p>This method determines how the view&#39;s html is attached to the Region&#39;s element. The default\nmethod is using append. You can override this if you would like to, for instance, specify that\nthe view&#39;s element fade in to view.</p>\n<p>You can override <code>attachHtml</code> for transition effects and more. \nThis example will cause a view to slide down from the top of the region, instead of just appearing in place.</p>\n<pre><code class=\"lang-js\">Marionette.Region.prototype.attachHtml = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(view)</span></span>{\n  <span class=\"hljs-keyword\">this</span>.$el.hide();\n  <span class=\"hljs-keyword\">this</span>.$el.html(view.el);\n  <span class=\"hljs-keyword\">this</span>.$el.slideDown(<span class=\"hljs-string\">\"fast\"</span>);\n}\n</code></pre>\n",
          "summary": "<p>This method determines how the view&#39;s html is attached to the Region&#39;s element. The default\nmethod is using append. You can override this if you would like to, for instance, specify that\nthe view&#39;s element fade in to view.</p>\n",
          "body": "<p>You can override <code>attachHtml</code> for transition effects and more. \nThis example will cause a view to slide down from the top of the region, instead of just appearing in place.</p>\n<pre><code class=\"lang-js\">Marionette.Region.prototype.attachHtml = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(view)</span></span>{\n  <span class=\"hljs-keyword\">this</span>.$el.hide();\n  <span class=\"hljs-keyword\">this</span>.$el.html(view.el);\n  <span class=\"hljs-keyword\">this</span>.$el.slideDown(<span class=\"hljs-string\">\"fast\"</span>);\n}\n</code></pre>\n"
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          }
        ],
        "paramStr": "view"
      }
    },
    "empty": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "public"
          }
        ],
        "description": {
          "full": "<p>Empty calls <code>destroy</code> on the <code>currentView</code>. This has the consequence of clearing the contents\nof the Region.</p>\n",
          "summary": "<p>Empty calls <code>destroy</code> on the <code>currentView</code>. This has the consequence of clearing the contents\nof the Region.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "api": {
          "type": "api",
          "visibility": "public"
        },
        "params": [],
        "paramStr": ""
      }
    },
    "_destroyView": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Call &#39;destroy&#39; or &#39;remove&#39;, depending on which is found on the view (if showing a raw Backbone view or a Marionette View).</p>\n",
          "summary": "<p>Call &#39;destroy&#39; or &#39;remove&#39;, depending on which is found on the view (if showing a raw Backbone view or a Marionette View).</p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [],
        "paramStr": ""
      }
    },
    "attachView": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          },
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          }
        ],
        "description": {
          "full": "<p>Associate a new view with the region by setting the region&#39;s value of <code>currentView</code>. This will not call render,\nshow, or fire any events.</p>\n",
          "summary": "<p>Associate a new view with the region by setting the region&#39;s value of <code>currentView</code>. This will not call render,\nshow, or fire any events.</p>\n",
          "body": ""
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [
          {
            "type": "param",
            "types": [
              "Marionette.View"
            ],
            "name": "view",
            "description": "",
            "optional": false,
            "typeStr": "Marionette.View"
          }
        ],
        "paramStr": "view"
      }
    },
    "hasView": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "public"
          }
        ],
        "description": {
          "full": "<p>Checks whether a view is currently present within the region. </p>\n",
          "summary": "<p>Checks whether a view is currently present within the region. </p>\n",
          "body": ""
        },
        "isPrivate": false,
        "api": {
          "type": "api",
          "visibility": "public"
        },
        "params": [],
        "paramStr": ""
      }
    },
    "reset": {
      "examples": [],
      "description": {
        "tags": [
          {
            "type": "api",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Reset the region by calling <code>empty</code>, which destroys its view and clears its content. It then deletes\nthe cached <code>$el</code> property. Finally it sets <code>this.el</code> to the value of the selector string of the old\nelement.</p>\n<p>This prepares the Region to be &#39;re-initialized&#39; with a new element based on the old selector\nstring, and is used by the LayoutView when it re-renders itself.</p>\n",
          "summary": "<p>Reset the region by calling <code>empty</code>, which destroys its view and clears its content. It then deletes\nthe cached <code>$el</code> property. Finally it sets <code>this.el</code> to the value of the selector string of the old\nelement.</p>\n",
          "body": "<p>This prepares the Region to be &#39;re-initialized&#39; with a new element based on the old selector\nstring, and is used by the LayoutView when it re-renders itself.</p>\n"
        },
        "isPrivate": true,
        "api": {
          "type": "api",
          "visibility": "private"
        },
        "params": [],
        "paramStr": ""
      }
    }
  }
}